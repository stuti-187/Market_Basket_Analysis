/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package marketbasket;

import ca.pfv.spmf.algorithmmanager.AlgorithmManager;
import ca.pfv.spmf.test.MainTestApriori_saveToFile;
import java.awt.Desktop;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.IOException;
import java.lang.Thread.UncaughtExceptionHandler;
import java.net.URL;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author inspirin
 */
public class MainFrame extends javax.swing.JFrame implements ThreadCompleteListener, UncaughtExceptionHandler {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        try {
            initComponents();
            setTitle("Market Basket");

            comboBox.removeAllItems();
           comboBox.addItem("");
            AlgorithmManager manager = AlgorithmManager.getInstance();

            List<String> algorithmList = manager.getListOfAlgorithmsAsString();
            for (String algorithmOrCategoryName : algorithmList) {

                if (algorithmOrCategoryName.contains("Two-Phase")) {
                    comboBox.addItem(algorithmOrCategoryName);
                }else if(algorithmOrCategoryName.equals("Apriori_association_rules")){
                   comboBox.addItem(algorithmOrCategoryName);
               
                }

            }
            comboBox.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent evt) {
                    // We need to update the user interface:
                    try {
                        updateUserInterfaceAfterAlgorithmSelection(evt.getItem().toString(),
                                evt.getStateChange() == ItemEvent.SELECTED);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

            });
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method updates the user interface according to what the user has
     * selected or unselected in the list of algorithms. For example, if the
     * user choose the "PrefixSpan" algorithm the parameters of the PrefixSpan
     * algorithm will be shown in the user interface.
     *
     * @param algorithmName the algorithm name.
     * @throws Exception
     * @boolean isSelected indicate if the algorithm has been selected or
     * unselected
     */
    private void updateUserInterfaceAfterAlgorithmSelection(String algorithmName, boolean isSelected) throws Exception {
        // COMBOBOX ITEM SELECTION - ITEM STATE CHANGED
        btnStart.setVisible(isSelected);
        if (isSelected) {
            if (algorithmName.equalsIgnoreCase("Two-Phase")) {
                txtMinimumConfidence.setVisible(false);
                  lblMin2.setVisible(false);
                  lblMin1.setVisible(true);
                   lblMin1.setText("Minimum Utility");
            } else {
                
                txtMinimumConfidence.setVisible(true);
                lblMin2.setVisible(true);
                
              
                lblMin1.setText("Minimum Confidence");
                  lblMin2.setText("Minimum Support");
                input_test_apriori = "test_apriori.txt";
                  
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtInputFile = new javax.swing.JTextField();
        btnSelectInput = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnConvertCsvToTrans = new javax.swing.JButton();
        txtMinUtility = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtOpenOutput = new javax.swing.JTextField();
        btnSelectOutput = new javax.swing.JButton();
        lblMin1 = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        progressBar = new javax.swing.JProgressBar();
        comboBox = new javax.swing.JComboBox();
        lblSetOutputFile = new javax.swing.JLabel();
        lblCsvCOnversionStatus = new javax.swing.JLabel();
        txtMinimumConfidence = new javax.swing.JTextField();
        lblMin2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Market Basket");

        jLabel2.setText("Browse CSV File");

        btnSelectInput.setText("Select File");
        btnSelectInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectInputActionPerformed(evt);
            }
        });

        jLabel3.setText("Select Algo");

        btnConvertCsvToTrans.setText("Convert Data");
        btnConvertCsvToTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertCsvToTransActionPerformed(evt);
            }
        });

        jLabel4.setText("Select Output File");

        btnSelectOutput.setText("Select File");
        btnSelectOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectOutputActionPerformed(evt);
            }
        });

        lblMin1.setText("Minimum Utility");

        btnStart.setText("Go");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        txtOutput.setColumns(20);
        txtOutput.setRows(5);
        jScrollPane1.setViewportView(txtOutput);

        comboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxItemStateChanged(evt);
            }
        });

        lblSetOutputFile.setText("Look At Output file");

        lblCsvCOnversionStatus.setText("CSV FIle Conversion Status");

        lblMin2.setText("Minimum Confidence");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 624, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(lblMin1)
                                    .addComponent(lblMin2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCsvCOnversionStatus)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtMinimumConfidence, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnStart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtMinUtility, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtOpenOutput, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtInputFile, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(comboBox, 0, 226, Short.MAX_VALUE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(27, 27, 27)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(btnSelectInput, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(btnConvertCsvToTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(btnSelectOutput)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(66, 66, 66)
                                                .addComponent(lblSetOutputFile))))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectInput)
                    .addComponent(txtInputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnConvertCsvToTrans))
                .addGap(12, 12, 12)
                .addComponent(lblCsvCOnversionStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtOpenOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSelectOutput))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMinUtility, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMin1))
                        .addGap(18, 18, 18)
                        .addComponent(txtMinimumConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblMin2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSetOutputFile, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectOutputActionPerformed
        // TODO add your handling code here:\
        askUserToChooseOutputFile();
    }//GEN-LAST:event_btnSelectOutputActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
        processRunAlgorithmCommandFromGUI();
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnSelectInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectInputActionPerformed
        // TODO add your handling code here:
        askUserToChooseInputFile();
    }//GEN-LAST:event_btnSelectInputActionPerformed
    boolean b;
    String input_text_two_phase;
    String input_test_apriori;
    private void btnConvertCsvToTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertCsvToTransActionPerformed
        // TODO add your handling code here:
        b = CSVToTransTable.convertData(inputFile);
        if (b) {
            lblCsvCOnversionStatus.setText("CSV converted to text file successfully");
            input_text_two_phase = "test_two_phase.txt";
          
        }

    }//GEN-LAST:event_btnConvertCsvToTransActionPerformed

    private void comboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_comboBoxItemStateChanged
    /**
     * This method ask the user to choose the output file. This method is called
     * when the user click on the button to choose the input file of the S P M F
     * interface.
     */
    private void askUserToChooseOutputFile() {
        try {
            // WHEN THE USER CLICK TO CHOOSE THE OUTPUT FILE

            File path;
            // Get the last path used by the user, if there is one
            String previousPath = PreferencesManager.getInstance().getOutputFilePath();
            // If there is no previous path (first time user), 
            // show the files in the "examples" package of
            // the spmf distribution.
            if (previousPath == null) {
                URL main = MainTestApriori_saveToFile.class.getResource("MainTestApriori_saveToFile.class");
                if (!"file".equalsIgnoreCase(main.getProtocol())) {
                    path = null;
                } else {
                    path = new File(main.getPath());
                }
            } else {
                // Otherwise, use the last path used by the user.
                path = new File(previousPath);
            }

            // ASK THE USER TO CHOOSE A FILE
            final JFileChooser fc;
            if (path != null) {
                fc = new JFileChooser(path.getAbsolutePath());
            } else {
                fc = new JFileChooser();
            }
            int returnVal = fc.showSaveDialog(MainFrame.this);

            // If the user chose a file
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                txtOpenOutput.setText(file.getName());
                outputFile = file.getPath(); // save the file path
                // save the path of this folder for next time.
                if (fc.getSelectedFile() != null) {
                    PreferencesManager.getInstance().setOutputFilePath(fc.getSelectedFile().getParent());
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                    "An error occured while opening the output file dialog. ERROR MESSAGE = " + e.toString(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

        {
            String buffer = new String(new byte[]{83, 80, 77, 70});
            if (getTitle().startsWith(buffer) != true) {
                setTitle(buffer);
            }
        }
    }

    String inputFile;

    private void askUserToChooseInputFile() {
        try {
            // WHEN THE USER CLICK TO CHOOSE THE INPUT FILE

            File path;
            // Get the last path used by the user, if there is one
            String previousPath = PreferencesManager.getInstance().getInputFilePath();
            if (previousPath == null) {
                // If there is no previous path (first time user), 
                // show the files in the "examples" package of
                // the spmf distribution.
                URL main = MainTestApriori_saveToFile.class.getResource("MainTestApriori_saveToFile.class");
                if (!"file".equalsIgnoreCase(main.getProtocol())) {
                    path = null;
                } else {
                    path = new File(main.getPath());
                }
            } else {
                // Otherwise, the user used SPMF before, so
                // we show the last path that he used.
                path = new File(previousPath);
            }

            // Create a file chooser to let the user
            // select the file.
            final JFileChooser fc = new JFileChooser(path);
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = fc.showOpenDialog(MainFrame.this);

            // if he chose a file
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                txtInputFile.setText(file.getName());
                inputFile = file.getPath(); // remember the file he chose
            }
            // remember this folder for next time.
            if (fc.getSelectedFile() != null) {
                PreferencesManager.getInstance().setInputFilePath(fc.getSelectedFile().getParent());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                    "An error occured while opening the input file dialog. ERROR MESSAGE = " + e.toString(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    private static NotifyingThread currentRunningAlgorithmThread = null;

    /**
     * This method is called when the user click the "Run" or "Stop" button of
     * the user interface, to launch the chosen algorithm and thereafter catch
     * exception if one occurs.
     */
    private void processRunAlgorithmCommandFromGUI() {
        // If a thread is already running (the user click on the stop Button
        if (currentRunningAlgorithmThread != null
                && currentRunningAlgorithmThread.isAlive()) {
            // stop that thread
            currentRunningAlgorithmThread.stop();

            txtOutput.setText("Algorithm stopped. \n");
            btnStart.setText("Run algorithm");
            progressBar.setIndeterminate(false);

            return;
        }

        // Get the parameters
        final String choice = (String) comboBox.getSelectedItem();
        final String parameters[] = new String[7];
        parameters[0] = txtMinUtility.getText();
        parameters[1] = txtMinimumConfidence.getText();
//		parameters[2] = textFieldParam3.getText();
//		parameters[3] = textFieldParam4.getText();
//		parameters[4] = textFieldParam5.getText();
//		parameters[5] = textFieldParam6.getText();
//		parameters[6] = textFieldParam7.getText();
        txtOutput.setText("Algorithm is running...\n");

        progressBar.setIndeterminate(true);
        btnStart.setText("Stop algorithm");
        comboBox.setEnabled(false);

        // RUN THE SELECTED ALGORITHM in a new thread
        // create a thread to execute the algorithm
        currentRunningAlgorithmThread = new NotifyingThread() {
            @Override
            public void doRun() throws Exception {
                if (choice.equalsIgnoreCase("Two-Phase")) {
                    CommandProcessor.runAlgorithm(choice, input_text_two_phase, outputFile, parameters);
//TODO
                } else if(choice.equalsIgnoreCase("Apriori_association_rules")){
                    CommandProcessor.runAlgorithm(choice, input_test_apriori, outputFile, parameters);

                }
            }
        };
        // The main thread will listen for the completion of the algorithm
        currentRunningAlgorithmThread.addListener(this);
        // The main thread will also listen for exception generated by the
        // algorithm.
        currentRunningAlgorithmThread.setUncaughtExceptionHandler(this);
        // Run the thread
        currentRunningAlgorithmThread.start();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConvertCsvToTrans;
    private javax.swing.JButton btnSelectInput;
    private javax.swing.JButton btnSelectOutput;
    private javax.swing.JButton btnStart;
    private javax.swing.JComboBox comboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCsvCOnversionStatus;
    private javax.swing.JLabel lblMin1;
    private javax.swing.JLabel lblMin2;
    private javax.swing.JLabel lblSetOutputFile;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField txtInputFile;
    private javax.swing.JTextField txtMinUtility;
    private javax.swing.JTextField txtMinimumConfidence;
    private javax.swing.JTextField txtOpenOutput;
    private javax.swing.JTextArea txtOutput;
    // End of variables declaration//GEN-END:variables

    String outputFile;

    /**
     * This method receives a notifications when an algorithm terminates that
     * was launched by the user by clicking "Run algorithm..."
     */
    @Override
    public void notifyOfThreadComplete(Thread thread, boolean succeed) {

        // IF - the algorithm terminates... and there is an output file
        if (succeed && lblSetOutputFile.isVisible()) {
			// if using wants to use the text editor to open the file

            // open the output file if the checkbox is checked 
            Desktop desktop = Desktop.getDesktop();
            // check first if we can open it on this operating system:
            if (desktop.isSupported(Desktop.Action.OPEN)) {
                try {
                    // if yes, open it
                    desktop.open(new File(outputFile));
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null,
                            "The output file failed to open with the default application. "
                            + "\n This error occurs if there is no default application on your system "
                            + "for opening the output file or the application failed to start. "
                            + "\n\n"
                            + "To fix the problem, consider changing the extension of the output file to .txt."
                            + "\n\n ERROR MESSAGE = " + e.toString(), "Error",
                            JOptionPane.ERROR_MESSAGE);
                } catch (SecurityException e) {
                    JOptionPane.showMessageDialog(null,
                            "A security error occured while trying to open the output file. ERROR MESSAGE = " + e.toString(), "Error",
                            JOptionPane.ERROR_MESSAGE);
                } catch (Throwable e) {
                    JOptionPane.showMessageDialog(null,
                            "An error occured while opening the output file. ERROR MESSAGE = " + e.toString(), "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }

        }

        btnStart.setText("Run algorithm");
        progressBar.setIndeterminate(false);
        comboBox.setEnabled(true);
    }

    /**
     * This method receives the notifications when an algorithm launched by the
     * user throw an exception
     */
    @Override
    public void uncaughtException(Thread thread, Throwable e) {
        // If the thread just die because the user click on the "Stop algorithm" button
        if (e instanceof ThreadDeath) {
            // we just let the thread die.
        } else if (e instanceof NumberFormatException) {
            // if it is a number format exception, meaning that the user enter a string as a parameter instead
            // of an integer or double value.
            JOptionPane.showMessageDialog(null,
                    "Error. Please check the parameters of the algorithm.  The format for numbers is incorrect. \n"
                    + "\n ERROR MESSAGE = " + e.toString(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            // If another kind of error occurred while running the algorithm, show the error.
            JOptionPane.showMessageDialog(null,
                    "An error occurred while trying to run the algorithm. \n ERROR MESSAGE = " + e.toString(), "Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        txtOutput.setText("");
    }
}
